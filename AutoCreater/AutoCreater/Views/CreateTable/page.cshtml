@using Models.CreateProperty;
@using RazorEngineTest;
@using System.Web.Mvc;
@using System.Text.RegularExpressions;
@model TableObj

@@section cut_head{
<style>
</style>
}


<el-container>
    <el-header>
        <el-form v-bind:inline="true" v-bind:model="SearchForm">
            @{
                string[] valueType = new string[] { "int", "decimal" };
                string[] stringType = new string[] { "varchar", "nvarchar" };


                bool isQ = false;
                string dbtype = "";
                foreach (TableDef td in Model.TableDefs)
                {
                    if (td.IsQuery)
                    {
                        dbtype = td.DbType.ToLower();
                        isQ = true;
                        string name = string.IsNullOrWhiteSpace(td.DisplayName) ? td.FieldName.Trim() : td.DisplayName;
                        <el-form-item label="@name">
                            @{
                                if (stringType.Contains(dbtype) || valueType.Contains(dbtype))
                                {
                                    <el-input v-model="SearchForm.@td.FieldName.Trim()" placeholder="@name" type="@(stringType.Contains(dbtype) ? "text" : "number")" clearable></el-input>
                                }
                                else if (dbtype == "date" || dbtype == "datetime")
                                {
                                    <el-date-picker v-model="SearchForm.@td.FieldName.Trim()"
                                                    type="@dbtype"
                                                    placeholder="@name"
                                                    value-format="yyyy-MM-dd@(dbtype == "datetime" ? " HH:mm" : "")" clearable >
                                    </el-date-picker>
                                }
                                else if (dbtype == "bit")
                                {
                                    <el-checkbox v-model="SearchForm.@td.FieldName.Trim()"></el-checkbox>
                                }
                            }
                        </el-form-item>
                                    }
                                }
                                <el-form-item>
                                    @{

                                        if (isQ)
                                        {

                                            <el-button type="primary" size="mini" plain icon="el-icon-search" v-on:click="$refs.table_Main.reload()">Search</el-button>

                                        }
                                        if (Model.IsExport)
                                        {

                                            <el-button type="primary" size="mini" plain icon="el-icon-download" v-on:click="onExport">Export</el-button>

                                        }
                                        if (Model.IsAdd)
                                        {
                                            <el-button type="primary" size="mini" plain icon="el-icon-plus" v-on:click="onAdd">Add</el-button>
                                        }
                                    }
                                </el-form-item>



            }
        </el-form>
    </el-header>
    <el-main>
        <el-grid url="@RazorHelper.RawHtml("@Url.Action(\"GetPage\")")" v-bind:filter="SearchForm" ref="table_Main" v-bind:default-sort="{prop:''}">
            @foreach (TableDef td in Model.TableDefs)
            {
                if (td.DisplayPage)
                {
                    dbtype = td.DbType.ToLower();
                    string name = string.IsNullOrWhiteSpace(td.DisplayName) ? td.FieldName.Trim() : td.DisplayName;

                    if (stringType.Contains(dbtype) || valueType.Contains(dbtype) || dbtype == "date" || dbtype == "datetime")
                    {
                        <el-table-column prop="@td.FieldName.Trim()" label="@name" width="150" show-overflow-tooltip>
                        </el-table-column>
                    }
                    else if (dbtype == "bit")
                    {
                        <el-table-column label="@name" width="50">
                            <template v-slot="scope">
                                <el-checkbox v-model="scope.row.@td.FieldName.Trim()" disabled></el-checkbox>
                            </template>
                        </el-table-column>

                    }

                }

            }

            @foreach (FkObj td in Model.FkObjs)
            {
                foreach (FkDef de in td.FkDefs)
                {
                    if (de.DisplayPage)
                    {
                        string name = string.IsNullOrWhiteSpace(de.DisplayName) ? de.FieldName.Trim() : de.DisplayName;
                        <el-table-column prop="@de.FieldName.Trim()" label="@name" width="120" show-overflow-tooltip>
                        </el-table-column>
                    }
                }


            }
            @{

                if (Model.IsDel || Model.IsUpdate)
                {
                    <el-table-column label="操作" width="120">
                        <template v-slot="scope">
                            @{
                                if (Model.IsUpdate)
                                {
                                    <el-button type="primary" icon="el-icon-edit" circle v-on:click="onEdit(scope)"></el-button>
                                }
                                if (Model.IsDel)
                                {
                                    <el-button type="primary" icon="el-icon-delete" circle v-on:click="onDelete(scope.row.@Model.TableDefs.Where(c => c.PrimaryKey).First().FieldName)"></el-button>
                                }
                            }


                        </template>
                    </el-table-column>
                                }

            }

        </el-grid>
    </el-main>



    <el-dialog v-bind:title="Dialog.EditModel.title"
               v-bind:visible.sync="Dialog.EditModel.visible"
               width="30%"
               v-bind:close-on-click-modal="false" v-bind:close-on-press-escape="false">
        <div>
            <el-form ref="editform" v-bind:model="Dialog.EditModel.Form" label-width="80px">
                @{
                    foreach (var c in Model.TableDefs.Where(c => !c.PrimaryKey))
                    {
                        dbtype = c.DbType.ToLower();
                        string name = string.IsNullOrWhiteSpace(c.DisplayName) ? c.FieldName.Trim() : c.DisplayName;
                        <el-form-item label="@name" prop="@c.FieldName.Trim()">
                            @{
                                if (stringType.Contains(dbtype) || valueType.Contains(dbtype))
                                {
                                    <el-input v-model="Dialog.EditModel.Form.@c.FieldName.Trim()" placeholder="@name" type="@(stringType.Contains(dbtype) ? "text" : "number")"
                                              @{ if (stringType.Contains(dbtype)) { @: maxlength="@Regex.Replace(c.Length,"\\((\\d+)\\)","$1")" show-word-limit
                                                                                                                                                                                                                                              } }></el-input>
    }
    else if (dbtype == "date" || dbtype == "datetime")
    {
        <el-date-picker v-model="Dialog.EditModel.Form.@c.FieldName.Trim()"
                        type="@dbtype"
                        placeholder="@name"
                        value-format="yyyy-MM-dd@(dbtype == "datetime" ? " HH:mm" : "")">
        </el-date-picker>
    }
    else if (dbtype == "bit")
    {
        <el-checkbox v-model="Dialog.EditModel.Form.@c.FieldName.Trim()"></el-checkbox>
    }
                            }
                        </el-form-item>

    }

                }

            </el-form>
        </div>
        <span slot="footer" class="dialog-footer">
            <el-button v-on:click="Dialog.EditModel.visible = false">取 消</el-button>
            <el-button type="primary" v-bind:loading="Dialog.EditModel.loading" v-on:click="onSave">确 定</el-button>
        </span>
    </el-dialog>

</el-container>






@@section scripts{
<script src="~/Scripts/ElementUI/elementUI-Gird/grid-elementUI.js"></script>
<script>
    var vue_data = {
        @{
            if(isQ){
            <text>
        SearchForm: {
            @foreach (TableDef td in Model.TableDefs)
            {
                if (td.IsQuery)
                {
                       @td.FieldName.Trim()@RazorHelper.RawHtml(":'',")
                }
            }

        },
        </text>
            }
            if (Model.IsAdd || Model.IsUpdate)
            {
                <text>
        Dialog: {
            EditModel: {
                visible: false,
                title: '',
                loading: false,
                Form: {
                    @{
                       var m= Model.TableDefs.Where(c => c.PrimaryKey).First();
                        @RazorHelper.RawHtml(m.FieldName+":"+(valueType.Contains(m.DbType)?"0":"''"))@:,
                        foreach (var c in Model.TableDefs.Where(c => !c.PrimaryKey))
                        {
                            string show = c.FieldName + ":";
                            if (c.DbType == "int")
                            {
                                show += "0";
                            }
                            else if (c.DbType == "bit")
                            {
                                show += "false";
                            }
                            else
                            {
                                show += "''";
                            }
                           @RazorHelper.RawHtml(show)@:,
                                                                }
                    }
                }

            }
        }
        </text>
                        }

        }
    };

    var vue_methods = {
        @{
            if (Model.IsExport)
            {
            <text>
        onExport: function () {
            var self = this;
            //公共js里的方法
            onExport.call(self, '@@Url.Action("OnExport")', self.SearchForm);

        },
        </text>

            }

            if (Model.IsDel)
            {
               <text>
        onDelete: function (pk) {
            onDelete.call(this, '@@Url.Action("OnDelete")', pk)
        },

        </text>
            }
            if (Model.IsAdd)
            {
               <text>
        onAdd: function () {
            onAdd.call(this);
            var emf = vue_data.Dialog.EditModel.Form;
            @{
                var pk = Model.TableDefs.Where(c => c.PrimaryKey).First();
                @:emf.@pk.FieldName = @(valueType.Contains(pk.DbType)?"0":"''") ;
                                    }
        },

        </text>

            }
            if (Model.IsUpdate)
            {
               <text>
        onEdit: function (scope) {
            onEdit.call(this,scope);

        },

        </text>
            }
   if (Model.IsUpdate||Model.IsAdd)
            {
               <text>
        onSave: function () {
            onSave.call(this, '@@Url.Action("OnSave")');
        },

        </text>
            }
        }

    }

</script>
}
